generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  uuid           String   @unique @default(uuid()) @db.Uuid
  name           String
  email          String   @unique
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           Roles    @default(CUSTOMER)
  bio            String?
  location       String?
  portfolioCount Int?     @default(0)
  profileImage   String?
  rating         Float?   @default(0.0)
  reviewCount    Int?     @default(0)
  specialties    String[] @default([])
  cart           Cart?
  orders         Order[]
  Photo          Photo[]

  @@map("users")
}

model Photo {
  id               Int         @id @default(autoincrement())
  uuid             String      @unique @default(uuid()) @db.Uuid
  key              String
  url              String
  description      String?
  isMain           Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  photographerId   Int
  mainPhotoId      Int?
  price            Decimal     @db.Decimal(10, 2)
  descriptor       Json?
  cartItems        CartItem[]
  orderItems       OrderItem[]
  mainPhoto        Photo?      @relation("relationMainPhoto", fields: [mainPhotoId], references: [id])
  vinculatedPhotos Photo[]     @relation("relationMainPhoto")
  photographer     User        @relation(fields: [photographerId], references: [id])

  @@index([descriptor], name: "photo_descriptor_idx")
  @@map("photos")
}

model Cart {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique @default(uuid()) @db.Uuid
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique @default(uuid()) @db.Uuid
  cartId          Int
  photoId         Int
  priceAtAddition Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  cart            Cart     @relation(fields: [cartId], references: [id])
  photo           Photo    @relation(fields: [photoId], references: [id])

  @@map("cart_items")
}

model Order {
  id                   Int         @id @default(autoincrement())
  uuid                 String      @unique @default(uuid()) @db.Uuid
  userId               Int
  totalAmount          Decimal     @db.Decimal(10, 2)
  systemFee            Decimal     @db.Decimal(10, 2)
  photographerEarnings Decimal     @db.Decimal(10, 2)
  status               OrderStatus @default(PENDING)
  paymentDetails       Json?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  items                OrderItem[]
  user                 User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id              Int      @id @default(autoincrement())
  uuid            String   @unique @default(uuid()) @db.Uuid
  orderId         Int
  photoId         Int
  priceAtPurchase Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id])
  photo           Photo    @relation(fields: [photoId], references: [id])

  @@map("order_items")
}

enum Roles {
  PHOTOGRAPHER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
